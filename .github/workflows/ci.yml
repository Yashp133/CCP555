name: ci

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install node dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  dockerfile-lint:
    name: Dockerfile Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: backend/Dockerfile

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install node dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

  integration-tests:
    name: Integration Tests (Hurl)
    needs: [lint, dockerfile-lint, unit-tests]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Build & start integration stack
        run: docker compose up -d --build --wait

      - name: Wait for API health
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8080/v1/health >/dev/null; then
              echo "API healthy"
              exit 0
            fi
            sleep 2
          done
          echo "API did not become healthy in time" >&2
          exit 1

      - name: Run Hurl integration tests (via Docker)
        env:
          # Container-to-container URL
          HURL_host: http://fragments:8080
          # Secrets override; defaults to testuser/testtest if not set
          HURL_basic_user: ${{ secrets.IT_BASIC_USER || 'testuser' }}
          HURL_basic_pass: ${{ secrets.IT_BASIC_PASS || 'testtest' }}
        run: |
          mkdir -p reports
          docker compose run --rm --no-deps \
            -e HURL_host \
            -e HURL_basic_user \
            -e HURL_basic_pass \
            hurl --test tests/integration/*.hurl --report-junit reports/hurl-junit.xml

      - name: Upload Hurl JUnit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hurl-junit
          path: backend/reports/hurl-junit.xml
          if-no-files-found: warn

      - name: Show container logs on failure
        if: failure()
        run: |
          docker ps
          docker compose ps
          docker compose logs --no-color fragments || true
          docker compose logs --no-color dynamodb-local || true
          docker compose logs --no-color localstack || true
          docker compose logs --no-color bootstrap || true

      - name: Tear down
        if: always()
        run: docker compose down -v

  docker-hub:
    name: Build and Push to Docker Hub
    needs: [lint, dockerfile-lint, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        env:
          DOCKERHUB_REPO: yashp133/fragments
          SHA_TAG: sha-${{ github.sha }}
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPO }}:${{ env.SHA_TAG }}
            ${{ env.DOCKERHUB_REPO }}:main
            ${{ env.DOCKERHUB_REPO }}:latest
